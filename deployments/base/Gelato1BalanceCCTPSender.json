{
  "address": "0x44c430447B6CF9E496a349Fc8F10967B43922371",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstDomain",
          "type": "uint32"
        },
        {
          "internalType": "contract IEIP3009Token",
          "name": "_srcToken",
          "type": "address"
        },
        {
          "internalType": "contract IEIP3009Token",
          "name": "_dstToken",
          "type": "address"
        },
        {
          "internalType": "contract ITokenMessenger",
          "name": "_tokenMessenger",
          "type": "address"
        },
        {
          "internalType": "contract IGelato1BalanceCCTPReceiver",
          "name": "_gelato1BalanceReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogBridge",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DST_DOMAIN",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DST_TOKEN",
      "outputs": [
        {
          "internalType": "contract IEIP3009Token",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GELATO_1BALANCE_RECEIVER",
      "outputs": [
        {
          "internalType": "contract IGelato1BalanceCCTPReceiver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SRC_TOKEN",
      "outputs": [
        {
          "internalType": "contract IEIP3009Token",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_MESSENGER",
      "outputs": [
        {
          "internalType": "contract ITokenMessenger",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "validAfter",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validBefore",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "nonce",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Authorization",
          "name": "_authorization",
          "type": "tuple"
        }
      ],
      "name": "bridgeAndDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b20d8e22a592bff4cf2835d024a4e8c904135653aaddd78432d0e76794e1a4d",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x92e94967A976610D27267273935De71B791f0037",
    "contractAddress": null,
    "transactionIndex": 7,
    "gasUsed": "1059075",
    "logsBloom": "0x
    "blockHash": "0x85b2ef6192a9e1c47f49600db6e47eea7f68132852462ccf85e599840e97a8b6",
    "transactionHash": "0x6b20d8e22a592bff4cf2835d024a4e8c904135653aaddd78432d0e76794e1a4d",
    "logs": [],
    "blockNumber": 12032861,
    "cumulativeGasUsed": "1632976",
    "status": 1,
    "byzantium": true
  },
  "args": [
    7,
    "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913",
    "0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359",
    "0x1682Ae6375C4E4A97e4B583BC394c861A46D8962",
    "0x99746A0dCc24492207Ba95A458e9fA036f48e53e"
  ],
  "numDeployments": 1,
  "solcInputHash": "07b8fb77ccf080c8c773dda681f2d3fe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstDomain\",\"type\":\"uint32\"},{\"internalType\":\"contract IEIP3009Token\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IEIP3009Token\",\"name\":\"_dstToken\",\"type\":\"address\"},{\"internalType\":\"contract ITokenMessenger\",\"name\":\"_tokenMessenger\",\"type\":\"address\"},{\"internalType\":\"contract IGelato1BalanceCCTPReceiver\",\"name\":\"_gelato1BalanceReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogBridge\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DST_DOMAIN\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DST_TOKEN\",\"outputs\":[{\"internalType\":\"contract IEIP3009Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GELATO_1BALANCE_RECEIVER\",\"outputs\":[{\"internalType\":\"contract IGelato1BalanceCCTPReceiver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SRC_TOKEN\",\"outputs\":[{\"internalType\":\"contract IEIP3009Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_MESSENGER\",\"outputs\":[{\"internalType\":\"contract ITokenMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Authorization\",\"name\":\"_authorization\",\"type\":\"tuple\"}],\"name\":\"bridgeAndDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Gelato1BalanceCCTPSender.sol\":\"Gelato1BalanceCCTPSender\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {GelatoRelayBase} from \\\"./base/GelatoRelayBase.sol\\\";\\nimport {TokenUtils} from \\\"./lib/TokenUtils.sol\\\";\\n\\nuint256 constant _FEE_COLLECTOR_START = 72; // offset: address + address + uint256\\nuint256 constant _FEE_TOKEN_START = 52; // offset: address + uint256\\nuint256 constant _FEE_START = 32; // offset: uint256\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeCollectorRelayContext() pure returns (address feeCollector) {\\n    assembly {\\n        feeCollector := shr(\\n            96,\\n            calldataload(sub(calldatasize(), _FEE_COLLECTOR_START))\\n        )\\n    }\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeTokenRelayContext() pure returns (address feeToken) {\\n    assembly {\\n        feeToken := shr(96, calldataload(sub(calldatasize(), _FEE_TOKEN_START)))\\n    }\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeRelayContext() pure returns (uint256 fee) {\\n    assembly {\\n        fee := calldataload(sub(calldatasize(), _FEE_START))\\n    }\\n}\\n\\n/**\\n * @dev Context variant with feeCollector, feeToken and fee appended to msg.data\\n * Expects calldata encoding:\\n * abi.encodePacked( _data,\\n *                   _feeCollector,\\n *                   _feeToken,\\n *                   _fee);\\n * Therefore, we're expecting 20 + 20 + 32 = 72 bytes to be appended to normal msgData\\n * 32bytes start offsets from calldatasize:\\n *     feeCollector: - 72 bytes\\n *     feeToken: - 52 bytes\\n *     fee: - 32 bytes\\n */\\n/// @dev Do not use with GelatoRelayFeeCollector - pick only one\\nabstract contract GelatoRelayContext is GelatoRelayBase {\\n    using TokenUtils for address;\\n\\n    // DANGER! Only use with onlyGelatoRelay `_isGelatoRelay` before transferring\\n    function _transferRelayFee() internal {\\n        _getFeeToken().transfer(_getFeeCollector(), _getFee());\\n    }\\n\\n    // DANGER! Only use with onlyGelatoRelay `_isGelatoRelay` before transferring\\n    function _transferRelayFeeCapped(uint256 _maxFee) internal {\\n        uint256 fee = _getFee();\\n        require(\\n            fee <= _maxFee,\\n            \\\"GelatoRelayContext._transferRelayFeeCapped: maxFee\\\"\\n        );\\n        _getFeeToken().transfer(_getFeeCollector(), fee);\\n    }\\n\\n    function _getMsgData() internal view returns (bytes calldata) {\\n        return\\n            _isGelatoRelay(msg.sender)\\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\\n                : msg.data;\\n    }\\n\\n    // Only use with GelatoRelayBase onlyGelatoRelay or `_isGelatoRelay` checks\\n    function _getFeeCollector() internal pure returns (address) {\\n        return _getFeeCollectorRelayContext();\\n    }\\n\\n    // Only use with previous onlyGelatoRelay or `_isGelatoRelay` checks\\n    function _getFeeToken() internal pure returns (address) {\\n        return _getFeeTokenRelayContext();\\n    }\\n\\n    // Only use with previous onlyGelatoRelay or `_isGelatoRelay` checks\\n    function _getFee() internal pure returns (uint256) {\\n        return _getFeeRelayContext();\\n    }\\n}\\n\",\"keccak256\":\"0xe47ba262f741e76c836d32c8f60cccc4334aa41c800204155f69d542442279ed\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/base/GelatoRelayBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {GELATO_RELAY, GELATO_RELAY_ZKSYNC} from \\\"../constants/GelatoRelay.sol\\\";\\n\\nabstract contract GelatoRelayBase {\\n    modifier onlyGelatoRelay() {\\n        require(_isGelatoRelay(msg.sender), \\\"onlyGelatoRelay\\\");\\n        _;\\n    }\\n\\n    function _isGelatoRelay(address _forwarder) internal view returns (bool) {\\n        return\\n            block.chainid == 324 || block.chainid == 280\\n                ? _forwarder == GELATO_RELAY_ZKSYNC\\n                : _forwarder == GELATO_RELAY;\\n    }\\n}\\n\",\"keccak256\":\"0x033fece9013a13dfc2165c8b9f474d0da6363741314a726d670507443131d2ab\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/constants/GelatoRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\naddress constant GELATO_RELAY = 0xaBcC9b596420A9E9172FD5938620E265a0f9Df92;\\naddress constant GELATO_RELAY_ERC2771 = 0xb539068872230f20456CF38EC52EF2f91AF4AE49;\\naddress constant GELATO_RELAY_CONCURRENT_ERC2771 = 0x8598806401A63Ddf52473F1B3C55bC9E33e2d73b;\\n\\naddress constant GELATO_RELAY_ZKSYNC = 0xB16a1DbE755f992636705fDbb3A8678a657EB3ea;\\naddress constant GELATO_RELAY_ERC2771_ZKSYNC = 0x22DCC39b2AC376862183dd35A1664798dafC7Da6;\\n// solhint-disable-next-line max-line-length\\naddress constant GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC = 0xBa4082F4961c8Fb76231995C967CD9aa40f321b5;\\n\",\"keccak256\":\"0x2235b1c6cf1f9b559ac882f80153f7dd97648780b98dd93370c901ad522dcb11\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/constants/Tokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"keccak256\":\"0xf58ba7702aa3e8aebf160c14db02a66afcc28d7dd0b94dee6a30cc7c5fa8335a\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/lib/TokenUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {NATIVE_TOKEN} from \\\"../constants/Tokens.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    IERC20Permit\\n} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary TokenUtils {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC20Permit;\\n\\n    modifier onlyERC20(address _token) {\\n        require(_token != NATIVE_TOKEN, \\\"TokenUtils.onlyERC20\\\");\\n        _;\\n    }\\n\\n    function permit(\\n        address _token,\\n        address _owner,\\n        address _spender,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) internal onlyERC20(_token) {\\n        IERC20Permit(_token).safePermit(\\n            _owner,\\n            _spender,\\n            _value,\\n            _deadline,\\n            _v,\\n            _r,\\n            _s\\n        );\\n    }\\n\\n    function transfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_amount == 0) return;\\n        _token == NATIVE_TOKEN\\n            ? Address.sendValue(payable(_to), _amount)\\n            : IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function transferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal onlyERC20(_token) {\\n        if (_amount == 0) return;\\n        IERC20(_token).safeTransferFrom(_from, _to, _amount);\\n    }\\n\\n    function getBalance(address token, address user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            token == NATIVE_TOKEN\\n                ? user.balance\\n                : IERC20(token).balanceOf(user);\\n    }\\n}\\n\",\"keccak256\":\"0xe253b669748d9af2d2524855f49992ccc434c4a95a9a737ab03ef550749d5a14\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/Gelato1BalanceCCTPSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nimport {\\n    GelatoRelayContext\\n} from \\\"@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol\\\";\\nimport {\\n    IGelato1BalanceCCTPReceiver\\n} from \\\"./interfaces/IGelato1BalanceCCTPReceiver.sol\\\";\\nimport {\\n    IGelato1BalanceCCTPSender\\n} from \\\"./interfaces/IGelato1BalanceCCTPSender.sol\\\";\\nimport {ITokenMessenger} from \\\"./interfaces/ITokenMessenger.sol\\\";\\nimport {IEIP3009Token} from \\\"./interfaces/IEIP3009Token.sol\\\";\\nimport {Authorization} from \\\"./types/Authorization.sol\\\";\\nimport {_computeVaultAddress} from \\\"./Vault.sol\\\";\\n\\ncontract Gelato1BalanceCCTPSender is\\n    IGelato1BalanceCCTPSender,\\n    GelatoRelayContext\\n{\\n    uint32 public immutable DST_DOMAIN;\\n    IEIP3009Token public immutable SRC_TOKEN;\\n    IEIP3009Token public immutable DST_TOKEN;\\n    ITokenMessenger public immutable TOKEN_MESSENGER;\\n    IGelato1BalanceCCTPReceiver public immutable GELATO_1BALANCE_RECEIVER;\\n\\n    constructor(\\n        uint32 _dstDomain,\\n        IEIP3009Token _srcToken,\\n        IEIP3009Token _dstToken,\\n        ITokenMessenger _tokenMessenger,\\n        IGelato1BalanceCCTPReceiver _gelato1BalanceReceiver\\n    ) {\\n        DST_DOMAIN = _dstDomain;\\n        SRC_TOKEN = _srcToken;\\n        DST_TOKEN = _dstToken;\\n        TOKEN_MESSENGER = _tokenMessenger;\\n        GELATO_1BALANCE_RECEIVER = _gelato1BalanceReceiver;\\n    }\\n\\n    function bridgeAndDeposit(\\n        address _owner,\\n        uint256 _amount,\\n        Authorization calldata _authorization\\n    ) external onlyGelatoRelay {\\n        SRC_TOKEN.receiveWithAuthorization(\\n            _owner,\\n            address(this),\\n            _amount,\\n            _authorization.validAfter,\\n            _authorization.validBefore,\\n            _authorization.nonce,\\n            _authorization.v,\\n            _authorization.r,\\n            _authorization.s\\n        );\\n\\n        _transferRelayFee();\\n\\n        uint256 remaining = _amount - _getFee();\\n        SRC_TOKEN.approve(address(TOKEN_MESSENGER), remaining);\\n\\n        address sponsor = _decodeSponsor(_authorization);\\n        address vault = _computeVaultAddress(\\n            sponsor,\\n            DST_TOKEN,\\n            GELATO_1BALANCE_RECEIVER\\n        );\\n\\n        TOKEN_MESSENGER.depositForBurnWithCaller(\\n            remaining,\\n            DST_DOMAIN,\\n            _addressToBytes32(vault),\\n            address(SRC_TOKEN),\\n            _addressToBytes32(address(GELATO_1BALANCE_RECEIVER))\\n        );\\n\\n        emit LogBridge(sponsor, _amount);\\n    }\\n\\n    function _decodeSponsor(\\n        Authorization calldata _authorization\\n    ) internal pure returns (address) {\\n        return address(uint160(uint256(_authorization.nonce)));\\n    }\\n\\n    function _addressToBytes32(address addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(addr)));\\n    }\\n}\\n\",\"keccak256\":\"0x3b26949eda4a4ce2d88f4ee47c28314a731a4f4ee4add1129e30335a4de96dd7\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nimport {IEIP3009Token} from \\\"./interfaces/IEIP3009Token.sol\\\";\\nimport {\\n    IGelato1BalanceCCTPReceiver\\n} from \\\"./interfaces/IGelato1BalanceCCTPReceiver.sol\\\";\\n\\nfunction _computeVaultAddress(\\n    address _owner,\\n    IEIP3009Token _token,\\n    IGelato1BalanceCCTPReceiver _gelato1BalanceReceiver\\n) pure returns (address) {\\n    bytes32 hashed = keccak256(\\n        abi.encodePacked(\\n            bytes1(0xff),\\n            _gelato1BalanceReceiver,\\n            keccak256(abi.encodePacked(_owner)),\\n            keccak256(\\n                abi.encodePacked(type(Vault).creationCode, abi.encode(_token))\\n            )\\n        )\\n    );\\n    return address(uint160(uint(hashed)));\\n}\\n\\ncontract Vault {\\n    constructor(IEIP3009Token _token) {\\n        _token.approve(msg.sender, type(uint256).max);\\n    }\\n}\\n\",\"keccak256\":\"0x74077fcde923a354ad946dc24e2fbfb699e42fdd8c99f76e0fef84c646ec9058\",\"license\":\"MIT\"},\"contracts/interfaces/IEIP3009Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IEIP3009Token is IERC20 {\\n    function receiveWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5fdad5ee5396579d35a024cf42a479a7a674070324d5550de9dade9ea4a92456\",\"license\":\"MIT\"},\"contracts/interfaces/IGelato1BalanceCCTPReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\ninterface IGelato1BalanceCCTPReceiver {\\n    function receiveAndDeposit(\\n        address _sponsor,\\n        bytes calldata _message,\\n        bytes calldata _attestation\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbfd53b2eceea0b8d1c9be54c93ee7d70745109964671333eea7ccff687b7b4e5\",\"license\":\"MIT\"},\"contracts/interfaces/IGelato1BalanceCCTPSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nimport {Authorization} from \\\"../types/Authorization.sol\\\";\\n\\ninterface IGelato1BalanceCCTPSender {\\n    event LogBridge(address indexed sponsor, uint256 amount);\\n\\n    function bridgeAndDeposit(\\n        address _owner,\\n        uint256 _amount,\\n        Authorization calldata _authorization\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa783c76d73a07a0807c12f8db36baf58fb0c69d82b86d0a7eb26f941ba640122\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\ninterface ITokenMessenger {\\n    function depositForBurnWithCaller(\\n        uint256 amount,\\n        uint32 destinationDomain,\\n        bytes32 mintRecipient,\\n        address burnToken,\\n        bytes32 destinationCaller\\n    ) external returns (uint64 nonce);\\n}\\n\",\"keccak256\":\"0xa275dc42e91b257bfa75eb5e8da50fb5d8a387adab603f4fd1c651e142aec0d7\",\"license\":\"MIT\"},\"contracts/types/Authorization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nstruct Authorization {\\n    uint256 validAfter;\\n    uint256 validBefore;\\n    bytes32 nonce;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n}\\n\",\"keccak256\":\"0x388c5d1da275c6150098e86a777fe634d5d74bb2fec565519a123e260ea90288\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61012060405234801561001157600080fd5b506040516113ab3803806113ab83398101604081905261003091610076565b63ffffffff9094166080526001600160a01b0392831660a05290821660c052811660e05216610100526100f4565b6001600160a01b038116811461007357600080fd5b50565b600080600080600060a0868803121561008e57600080fd5b855163ffffffff811681146100a257600080fd5b60208701519095506100b38161005e565b60408701519094506100c48161005e565b60608701519093506100d58161005e565b60808701519092506100e68161005e565b809150509295509295909350565b60805160a05160c05160e051610100516112366101756000396000818161016c015281816104600152610539015260008181610145015281816103900152610488015260008181607c015261043f01526000818160cd01528181610219015281816103c2015261050301526000818161010901526104c501526112366000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80637411a115116100505780637411a11514610104578063b8b32ff714610140578063e739e04f1461016757600080fd5b80631a7691ff146100775780631b726cfd146100c85780636ae0cb98146100ef575b600080fd5b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b6101026100fd366004610ec7565b61018e565b005b61012b7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016100bf565b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b61019733610662565b610202576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6f6e6c7947656c61746f52656c6179000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663ef55bec684308585356020870135604088013561025d60808a0160608b01610f49565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e08a901b16815273ffffffffffffffffffffffffffffffffffffffff978816600482015296909516602487015260448601939093526064850191909152608484015260a483015260ff1660c4820152608084013560e482015260a084013561010482015261012401600060405180830381600087803b15801561030457600080fd5b505af1158015610318573d6000803e3d6000fd5b505050506103246106df565b60006103537fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe036013584610f73565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af115801561040d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104319190610fad565b5060408201356000610484827f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610773565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f856ddb6847f00000000000000000000000000000000000000000000000000000000000000006105018573ffffffffffffffffffffffffffffffffffffffff1690565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b168152600481019590955263ffffffff939093166024850152604484019190915273ffffffffffffffffffffffffffffffffffffffff166064830152608482015260a4016020604051808303816000875af11580156105e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106099190610fcf565b508173ffffffffffffffffffffffffffffffffffffffff167ffc793a8fbfd41e692f3d560884a4cf823ed1fad56a3dacd06a162aa56bf87bbf8660405161065291815260200190565b60405180910390a2505050505050565b6000466101441480610675575046610118145b6106ab5773ffffffffffffffffffffffffffffffffffffffff821673abcc9b596420a9e9172fd5938620e265a0f9df92146106d9565b73ffffffffffffffffffffffffffffffffffffffff821673b16a1dbe755f992636705fdbb3a8678a657eb3ea145b92915050565b610771367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb8013560601c367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00135367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcc013560601c73ffffffffffffffffffffffffffffffffffffffff169190610947565b565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085901b16602082015260009081907fff0000000000000000000000000000000000000000000000000000000000000090849060340160405160208183030381529060405280519060200120604051806020016107f490610eba565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f90910116604081815273ffffffffffffffffffffffffffffffffffffffff8a16602083015201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610880929160200161101d565b6040516020818303038152906040528051906020012060405160200161090894939291907fff0000000000000000000000000000000000000000000000000000000000000094909416845260609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830152603582015260550190565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152919052805160209091012095945050505050565b8060000361095457505050565b73ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146109ab576109a673ffffffffffffffffffffffffffffffffffffffff841683836109b5565b505050565b6109a68282610a42565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526109a6908490610b9c565b80471015610aac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016101f9565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610b06576040519150601f19603f3d011682016040523d82523d6000602084013e610b0b565b606091505b50509050806109a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016101f9565b6000610bfe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610cab9092919063ffffffff16565b9050805160001480610c1f575080806020019051810190610c1f9190610fad565b6109a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016101f9565b6060610cba8484600085610cc2565b949350505050565b606082471015610d54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016101f9565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610d7d919061104c565b60006040518083038185875af1925050503d8060008114610dba576040519150601f19603f3d011682016040523d82523d6000602084013e610dbf565b606091505b5091509150610dd087838387610ddb565b979650505050505050565b60608315610e71578251600003610e6a5773ffffffffffffffffffffffffffffffffffffffff85163b610e6a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101f9565b5081610cba565b610cba8383815115610e865781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f99190611068565b610147806110ba83390190565b6000806000838503610100811215610ede57600080fd5b843573ffffffffffffffffffffffffffffffffffffffff81168114610f0257600080fd5b93506020850135925060c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc082011215610f3b57600080fd5b506040840190509250925092565b600060208284031215610f5b57600080fd5b813560ff81168114610f6c57600080fd5b9392505050565b818103818111156106d9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060208284031215610fbf57600080fd5b81518015158114610f6c57600080fd5b600060208284031215610fe157600080fd5b815167ffffffffffffffff81168114610f6c57600080fd5b60005b83811015611014578181015183820152602001610ffc565b50506000910152565b6000835161102f818460208801610ff9565b835190830190611043818360208801610ff9565b01949350505050565b6000825161105e818460208701610ff9565b9190910192915050565b6020815260008251806020840152611087816040850160208701610ff9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe608060405234801561001057600080fd5b5060405161014738038061014783398101604081905261002f916100a8565b60405163095ea7b360e01b815233600482015260001960248201526001600160a01b0382169063095ea7b3906044016020604051808303816000875af115801561007d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a191906100d8565b50506100fa565b6000602082840312156100ba57600080fd5b81516001600160a01b03811681146100d157600080fd5b9392505050565b6000602082840312156100ea57600080fd5b815180151581146100d157600080fd5b603f806101086000396000f3fe6080604052600080fdfea2646970667358221220580b4babf7e393a39a2b94d5a473c5e495fbc10ff253fc94bee162ee6470381664736f6c63430008190033a26469706673582212204b40349a557968c264c7956b2762ad0114d86388cd8cc3fbff1901074d0ecafb64736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c80637411a115116100505780637411a11514610104578063b8b32ff714610140578063e739e04f1461016757600080fd5b80631a7691ff146100775780631b726cfd146100c85780636ae0cb98146100ef575b600080fd5b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b6101026100fd366004610ec7565b61018e565b005b61012b7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016100bf565b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b61019733610662565b610202576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6f6e6c7947656c61746f52656c6179000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663ef55bec684308585356020870135604088013561025d60808a0160608b01610f49565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e08a901b16815273ffffffffffffffffffffffffffffffffffffffff978816600482015296909516602487015260448601939093526064850191909152608484015260a483015260ff1660c4820152608084013560e482015260a084013561010482015261012401600060405180830381600087803b15801561030457600080fd5b505af1158015610318573d6000803e3d6000fd5b505050506103246106df565b60006103537fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe036013584610f73565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af115801561040d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104319190610fad565b5060408201356000610484827f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610773565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f856ddb6847f00000000000000000000000000000000000000000000000000000000000000006105018573ffffffffffffffffffffffffffffffffffffffff1690565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b168152600481019590955263ffffffff939093166024850152604484019190915273ffffffffffffffffffffffffffffffffffffffff166064830152608482015260a4016020604051808303816000875af11580156105e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106099190610fcf565b508173ffffffffffffffffffffffffffffffffffffffff167ffc793a8fbfd41e692f3d560884a4cf823ed1fad56a3dacd06a162aa56bf87bbf8660405161065291815260200190565b60405180910390a2505050505050565b6000466101441480610675575046610118145b6106ab5773ffffffffffffffffffffffffffffffffffffffff821673abcc9b596420a9e9172fd5938620e265a0f9df92146106d9565b73ffffffffffffffffffffffffffffffffffffffff821673b16a1dbe755f992636705fdbb3a8678a657eb3ea145b92915050565b610771367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb8013560601c367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00135367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcc013560601c73ffffffffffffffffffffffffffffffffffffffff169190610947565b565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085901b16602082015260009081907fff0000000000000000000000000000000000000000000000000000000000000090849060340160405160208183030381529060405280519060200120604051806020016107f490610eba565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f90910116604081815273ffffffffffffffffffffffffffffffffffffffff8a16602083015201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610880929160200161101d565b6040516020818303038152906040528051906020012060405160200161090894939291907fff0000000000000000000000000000000000000000000000000000000000000094909416845260609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830152603582015260550190565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152919052805160209091012095945050505050565b8060000361095457505050565b73ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146109ab576109a673ffffffffffffffffffffffffffffffffffffffff841683836109b5565b505050565b6109a68282610a42565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526109a6908490610b9c565b80471015610aac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016101f9565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610b06576040519150601f19603f3d011682016040523d82523d6000602084013e610b0b565b606091505b50509050806109a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016101f9565b6000610bfe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610cab9092919063ffffffff16565b9050805160001480610c1f575080806020019051810190610c1f9190610fad565b6109a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016101f9565b6060610cba8484600085610cc2565b949350505050565b606082471015610d54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016101f9565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610d7d919061104c565b60006040518083038185875af1925050503d8060008114610dba576040519150601f19603f3d011682016040523d82523d6000602084013e610dbf565b606091505b5091509150610dd087838387610ddb565b979650505050505050565b60608315610e71578251600003610e6a5773ffffffffffffffffffffffffffffffffffffffff85163b610e6a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101f9565b5081610cba565b610cba8383815115610e865781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f99190611068565b610147806110ba83390190565b6000806000838503610100811215610ede57600080fd5b843573ffffffffffffffffffffffffffffffffffffffff81168114610f0257600080fd5b93506020850135925060c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc082011215610f3b57600080fd5b506040840190509250925092565b600060208284031215610f5b57600080fd5b813560ff81168114610f6c57600080fd5b9392505050565b818103818111156106d9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060208284031215610fbf57600080fd5b81518015158114610f6c57600080fd5b600060208284031215610fe157600080fd5b815167ffffffffffffffff81168114610f6c57600080fd5b60005b83811015611014578181015183820152602001610ffc565b50506000910152565b6000835161102f818460208801610ff9565b835190830190611043818360208801610ff9565b01949350505050565b6000825161105e818460208701610ff9565b9190910192915050565b6020815260008251806020840152611087816040850160208701610ff9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe608060405234801561001057600080fd5b5060405161014738038061014783398101604081905261002f916100a8565b60405163095ea7b360e01b815233600482015260001960248201526001600160a01b0382169063095ea7b3906044016020604051808303816000875af115801561007d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a191906100d8565b50506100fa565b6000602082840312156100ba57600080fd5b81516001600160a01b03811681146100d157600080fd5b9392505050565b6000602082840312156100ea57600080fd5b815180151581146100d157600080fd5b603f806101086000396000f3fe6080604052600080fdfea2646970667358221220580b4babf7e393a39a2b94d5a473c5e495fbc10ff253fc94bee162ee6470381664736f6c63430008190033a26469706673582212204b40349a557968c264c7956b2762ad0114d86388cd8cc3fbff1901074d0ecafb64736f6c63430008190033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
