{
  "address": "0x63Ca4Cb241294Fa19b9EF32BE558CAC49Ac975B6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMaplePool",
          "name": "_maplePool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "VaultNotMintRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MAPLE_POOL",
      "outputs": [
        {
          "internalType": "contract IMaplePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MESSAGE_TRANSMITTER",
      "outputs": [
        {
          "internalType": "contract IMessageTransmitter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN",
      "outputs": [
        {
          "internalType": "contract IEIP3009Token",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sponsor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_attestation",
          "type": "bytes"
        }
      ],
      "name": "receiveAndDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sponsor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_attestation",
          "type": "bytes"
        }
      ],
      "name": "receiveAndDepositSyncFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1871a6dab56f69aae5083efab33645f66032473d2b0936ebe4ee56359335a197",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xB65540bBA534E88EB4a5062D0E6519C07063b259",
    "contractAddress": null,
    "transactionIndex": 50,
    "gasUsed": "1171960",
    "logsBloom": "0x
    "blockHash": "0x199117460cec35883c06ceb97986cf3edd549c84ec4404a632e9bb48c66b608e",
    "transactionHash": "0x1871a6dab56f69aae5083efab33645f66032473d2b0936ebe4ee56359335a197",
    "logs": [],
    "blockNumber": 8171649,
    "cumulativeGasUsed": "8317271",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5F9b60A530dcc81b48Cd1d6B675EF9A766BBA326"
  ],
  "numDeployments": 1,
  "solcInputHash": "86bb56801ea36a8de8570d1aabf9c73a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMaplePool\",\"name\":\"_maplePool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"VaultNotMintRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MAPLE_POOL\",\"outputs\":[{\"internalType\":\"contract IMaplePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MESSAGE_TRANSMITTER\",\"outputs\":[{\"internalType\":\"contract IMessageTransmitter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IEIP3009Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_attestation\",\"type\":\"bytes\"}],\"name\":\"receiveAndDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_attestation\",\"type\":\"bytes\"}],\"name\":\"receiveAndDepositSyncFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MapleCCTPReceiver.sol\":\"MapleCCTPReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {GelatoRelayBase} from \\\"./base/GelatoRelayBase.sol\\\";\\nimport {TokenUtils} from \\\"./lib/TokenUtils.sol\\\";\\n\\nuint256 constant _FEE_COLLECTOR_START = 72; // offset: address + address + uint256\\nuint256 constant _FEE_TOKEN_START = 52; // offset: address + uint256\\nuint256 constant _FEE_START = 32; // offset: uint256\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeCollectorRelayContext() pure returns (address feeCollector) {\\n    assembly {\\n        feeCollector := shr(\\n            96,\\n            calldataload(sub(calldatasize(), _FEE_COLLECTOR_START))\\n        )\\n    }\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeTokenRelayContext() pure returns (address feeToken) {\\n    assembly {\\n        feeToken := shr(96, calldataload(sub(calldatasize(), _FEE_TOKEN_START)))\\n    }\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeRelayContext() pure returns (uint256 fee) {\\n    assembly {\\n        fee := calldataload(sub(calldatasize(), _FEE_START))\\n    }\\n}\\n\\n/**\\n * @dev Context variant with feeCollector, feeToken and fee appended to msg.data\\n * Expects calldata encoding:\\n * abi.encodePacked( _data,\\n *                   _feeCollector,\\n *                   _feeToken,\\n *                   _fee);\\n * Therefore, we're expecting 20 + 20 + 32 = 72 bytes to be appended to normal msgData\\n * 32bytes start offsets from calldatasize:\\n *     feeCollector: - 72 bytes\\n *     feeToken: - 52 bytes\\n *     fee: - 32 bytes\\n */\\n/// @dev Do not use with GelatoRelayFeeCollector - pick only one\\nabstract contract GelatoRelayContext is GelatoRelayBase {\\n    using TokenUtils for address;\\n\\n    // DANGER! Only use with onlyGelatoRelay `_isGelatoRelay` before transferring\\n    function _transferRelayFee() internal {\\n        _getFeeToken().transfer(_getFeeCollector(), _getFee());\\n    }\\n\\n    // DANGER! Only use with onlyGelatoRelay `_isGelatoRelay` before transferring\\n    function _transferRelayFeeCapped(uint256 _maxFee) internal {\\n        uint256 fee = _getFee();\\n        require(\\n            fee <= _maxFee,\\n            \\\"GelatoRelayContext._transferRelayFeeCapped: maxFee\\\"\\n        );\\n        _getFeeToken().transfer(_getFeeCollector(), fee);\\n    }\\n\\n    function _getMsgData() internal view returns (bytes calldata) {\\n        return\\n            _isGelatoRelay(msg.sender)\\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\\n                : msg.data;\\n    }\\n\\n    // Only use with GelatoRelayBase onlyGelatoRelay or `_isGelatoRelay` checks\\n    function _getFeeCollector() internal pure returns (address) {\\n        return _getFeeCollectorRelayContext();\\n    }\\n\\n    // Only use with previous onlyGelatoRelay or `_isGelatoRelay` checks\\n    function _getFeeToken() internal pure returns (address) {\\n        return _getFeeTokenRelayContext();\\n    }\\n\\n    // Only use with previous onlyGelatoRelay or `_isGelatoRelay` checks\\n    function _getFee() internal pure returns (uint256) {\\n        return _getFeeRelayContext();\\n    }\\n}\\n\",\"keccak256\":\"0xe47ba262f741e76c836d32c8f60cccc4334aa41c800204155f69d542442279ed\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/base/GelatoRelayBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {GELATO_RELAY, GELATO_RELAY_ZKSYNC} from \\\"../constants/GelatoRelay.sol\\\";\\n\\nabstract contract GelatoRelayBase {\\n    modifier onlyGelatoRelay() {\\n        require(_isGelatoRelay(msg.sender), \\\"onlyGelatoRelay\\\");\\n        _;\\n    }\\n\\n    function _isGelatoRelay(address _forwarder) internal view returns (bool) {\\n        return\\n            block.chainid == 324 || block.chainid == 280\\n                ? _forwarder == GELATO_RELAY_ZKSYNC\\n                : _forwarder == GELATO_RELAY;\\n    }\\n}\\n\",\"keccak256\":\"0x033fece9013a13dfc2165c8b9f474d0da6363741314a726d670507443131d2ab\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/constants/GelatoRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\naddress constant GELATO_RELAY = 0xaBcC9b596420A9E9172FD5938620E265a0f9Df92;\\naddress constant GELATO_RELAY_ERC2771 = 0xb539068872230f20456CF38EC52EF2f91AF4AE49;\\naddress constant GELATO_RELAY_CONCURRENT_ERC2771 = 0x8598806401A63Ddf52473F1B3C55bC9E33e2d73b;\\n\\naddress constant GELATO_RELAY_ZKSYNC = 0xB16a1DbE755f992636705fDbb3A8678a657EB3ea;\\naddress constant GELATO_RELAY_ERC2771_ZKSYNC = 0x22DCC39b2AC376862183dd35A1664798dafC7Da6;\\n// solhint-disable-next-line max-line-length\\naddress constant GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC = 0xBa4082F4961c8Fb76231995C967CD9aa40f321b5;\\n\",\"keccak256\":\"0x2235b1c6cf1f9b559ac882f80153f7dd97648780b98dd93370c901ad522dcb11\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/constants/Tokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"keccak256\":\"0xf58ba7702aa3e8aebf160c14db02a66afcc28d7dd0b94dee6a30cc7c5fa8335a\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/lib/TokenUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {NATIVE_TOKEN} from \\\"../constants/Tokens.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    IERC20Permit\\n} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary TokenUtils {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC20Permit;\\n\\n    modifier onlyERC20(address _token) {\\n        require(_token != NATIVE_TOKEN, \\\"TokenUtils.onlyERC20\\\");\\n        _;\\n    }\\n\\n    function permit(\\n        address _token,\\n        address _owner,\\n        address _spender,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) internal onlyERC20(_token) {\\n        IERC20Permit(_token).safePermit(\\n            _owner,\\n            _spender,\\n            _value,\\n            _deadline,\\n            _v,\\n            _r,\\n            _s\\n        );\\n    }\\n\\n    function transfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_amount == 0) return;\\n        _token == NATIVE_TOKEN\\n            ? Address.sendValue(payable(_to), _amount)\\n            : IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function transferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal onlyERC20(_token) {\\n        if (_amount == 0) return;\\n        IERC20(_token).safeTransferFrom(_from, _to, _amount);\\n    }\\n\\n    function getBalance(address token, address user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            token == NATIVE_TOKEN\\n                ? user.balance\\n                : IERC20(token).balanceOf(user);\\n    }\\n}\\n\",\"keccak256\":\"0xe253b669748d9af2d2524855f49992ccc434c4a95a9a737ab03ef550749d5a14\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/MapleCCTPReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nimport {\\n    GelatoRelayContext\\n} from \\\"@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol\\\";\\nimport {\\n    IMapleCCTPReceiver\\n} from \\\"./interfaces/IMapleCCTPReceiver.sol\\\";\\nimport {IMessageTransmitter} from \\\"./interfaces/IMessageTransmitter.sol\\\";\\nimport {IMaplePool} from \\\"./interfaces/IMaplePool.sol\\\";\\nimport {IEIP3009Token} from \\\"./interfaces/IEIP3009Token.sol\\\";\\nimport {Vault, _computeVaultAddress} from \\\"./Vault.sol\\\";\\n\\ncontract MapleCCTPReceiver is\\n    IMapleCCTPReceiver,\\n    GelatoRelayContext\\n{\\n    IEIP3009Token public constant TOKEN = IEIP3009Token(0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238);\\n    IMessageTransmitter public constant MESSAGE_TRANSMITTER = IMessageTransmitter(0x7865fAfC2db2093669d92c0F33AeEF291086BEFD);\\n\\n    IMaplePool public immutable MAPLE_POOL;\\n    \\n    // https://developers.circle.com/stablecoins/docs/message-format\\n    uint8 private constant _BODY_INDEX = 116;\\n    uint8 private constant _MINT_RECIPIENT_INDEX = _BODY_INDEX + 36;\\n    uint8 private constant _AMOUNT_INDEX = _BODY_INDEX + 68;\\n\\n    error VaultNotMintRecipient();\\n\\n    constructor(\\n        IMaplePool _maplePool\\n    ) {\\n        MAPLE_POOL= _maplePool;\\n    }\\n\\n    function receiveAndDepositSyncFee(\\n        address _sponsor,\\n        bytes calldata _message,\\n        bytes calldata _attestation\\n    ) external onlyGelatoRelay {\\n        uint256 amount = _receiveFromVault(_sponsor, _message, _attestation);\\n\\n        _transferRelayFee();\\n        uint256 remaining = amount - _getFee();\\n\\n        TOKEN.approve(address(MAPLE_POOL), remaining);\\n        MAPLE_POOL.depositToken(_sponsor, remaining);\\n    }\\n\\n    function receiveAndDeposit(\\n        address _sponsor,\\n        bytes calldata _message,\\n        bytes calldata _attestation\\n    ) external {\\n        uint256 amount = _receiveFromVault(_sponsor, _message, _attestation);\\n\\n        TOKEN.approve(address(MAPLE_POOL), amount);\\n        MAPLE_POOL.depositToken(_sponsor, amount);\\n    }\\n\\n    function _receiveFromVault(\\n        address _sponsor,\\n        bytes calldata _message,\\n        bytes calldata _attestation\\n    ) internal returns (uint256 amount) {\\n        address vault = _getOrCreateVault(_sponsor);\\n\\n        _requireVaultIsMintRecipient(vault, _message);\\n        MESSAGE_TRANSMITTER.receiveMessage(_message, _attestation);\\n\\n        amount = _decodeAmount(_message);\\n        TOKEN.transferFrom(vault, address(this), amount);\\n    }\\n\\n    function _getOrCreateVault(\\n        address _owner\\n    ) internal returns (address vault) {\\n        vault = _computeVaultAddress(_owner, TOKEN, this);\\n        if (vault.code.length == 0) _deployVault(_owner);\\n    }\\n\\n    function _deployVault(address _owner) internal {\\n        new Vault{salt: keccak256(abi.encodePacked(_owner))}(TOKEN);\\n    }\\n\\n    function _requireVaultIsMintRecipient(\\n        address _vault,\\n        bytes calldata _message\\n    ) internal pure {\\n        if (_vault != _decodeMintRecipient(_message))\\n            revert VaultNotMintRecipient();\\n    }\\n\\n    function _decodeMintRecipient(\\n        bytes calldata _message\\n    ) internal pure returns (address) {\\n        bytes32 mintRecipient = bytes32(_message[_MINT_RECIPIENT_INDEX:]);\\n        return address(uint160(uint256(mintRecipient)));\\n    }\\n\\n    function _decodeAmount(\\n        bytes calldata _message\\n    ) internal pure returns (uint256) {\\n        bytes32 amount = bytes32(_message[_AMOUNT_INDEX:]);\\n        return uint256(amount);\\n    }\\n}\\n\",\"keccak256\":\"0x6688d38e0ed0447f383dd30b75c4ee425f4f99cf54b70cea01caecad71cbc29a\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nimport {IEIP3009Token} from \\\"./interfaces/IEIP3009Token.sol\\\";\\nimport {\\n    IMapleCCTPReceiver\\n} from \\\"./interfaces/IMapleCCTPReceiver.sol\\\";\\n\\nfunction _computeVaultAddress(\\n    address _owner,\\n    IEIP3009Token _token,\\n    IMapleCCTPReceiver _mapleReceiver\\n) pure returns (address) {\\n    bytes32 hashed = keccak256(\\n        abi.encodePacked(\\n            bytes1(0xff),\\n            _mapleReceiver,\\n            keccak256(abi.encodePacked(_owner)),\\n            keccak256(\\n                abi.encodePacked(type(Vault).creationCode, abi.encode(_token))\\n            )\\n        )\\n    );\\n    return address(uint160(uint(hashed)));\\n}\\n\\ncontract Vault {\\n    constructor(IEIP3009Token _token) {\\n        _token.approve(msg.sender, type(uint256).max);\\n    }\\n}\\n\",\"keccak256\":\"0x80d0e45cf368ad254f08ec26e7ce9904f2d2cb8b91538e6202ee79187aaf08a8\",\"license\":\"MIT\"},\"contracts/interfaces/IEIP3009Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IEIP3009Token is IERC20 {\\n    function receiveWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5fdad5ee5396579d35a024cf42a479a7a674070324d5550de9dade9ea4a92456\",\"license\":\"MIT\"},\"contracts/interfaces/IMapleCCTPReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\ninterface IMapleCCTPReceiver {\\n    function receiveAndDeposit(\\n        address _sponsor,\\n        bytes calldata _message,\\n        bytes calldata _attestation\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8f3a7916e27745488e3df3cd8c242ae897ab63131a4aa84ac53237743034020a\",\"license\":\"MIT\"},\"contracts/interfaces/IMaplePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\n\\ninterface IMaplePool {\\n    function depositToken(\\n        address sponsor,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4934e36631bcbf48a837b54477edbd24628ae40f2b164136aec10ba8b8a38a2e\",\"license\":\"MIT\"},\"contracts/interfaces/IMessageTransmitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\ninterface IMessageTransmitter {\\n    event MessageSent(bytes message);\\n\\n    function receiveMessage(\\n        bytes calldata message,\\n        bytes calldata attestation\\n    ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0x4cb28f5311b44114356e9b47f9912f4cbb55d5a334a5530552953eda3036b919\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052348015600f57600080fd5b506040516114ec3803806114ec833981016040819052602c91603c565b6001600160a01b0316608052606a565b600060208284031215604d57600080fd5b81516001600160a01b0381168114606357600080fd5b9392505050565b60805161144c6100a060003960008181607101528181610213015281816102f1015281816103a20152610480015261144c6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063b6a84a5f11610050578063b6a84a5f146100d7578063de73363c146100f2578063f67784f81461010757600080fd5b806346ac8bd51461006c57806382bfefc8146100bc575b600080fd5b6100937f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b610093731c7d4b196cb0c7b01d743fbc6116a902379c723881565b610093737865fafc2db2093669d92c0f33aeef291086befd81565b610105610100366004611019565b61011a565b005b610105610115366004611019565b610356565b610123336104e4565b61018e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6f6e6c7947656c61746f52656c6179000000000000000000000000000000000060448201526064015b60405180910390fd5b600061019d8686868686610561565b90506101a76106dd565b60006101d67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0360135836110e4565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016600482015260248101829052909150731c7d4b196cb0c7b01d743fbc6116a902379c72389063095ea7b3906044016020604051808303816000875af1158015610280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a491906110f7565b506040517f338b5dea00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063338b5dea90604401600060405180830381600087803b15801561033557600080fd5b505af1158015610349573d6000803e3d6000fd5b5050505050505050505050565b60006103658686868686610561565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016600482015260248101829052909150731c7d4b196cb0c7b01d743fbc6116a902379c72389063095ea7b3906044016020604051808303816000875af115801561040f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043391906110f7565b506040517f338b5dea00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063338b5dea90604401600060405180830381600087803b1580156104c457600080fd5b505af11580156104d8573d6000803e3d6000fd5b50505050505050505050565b60004661014414806104f7575046610118145b61052d5773ffffffffffffffffffffffffffffffffffffffff821673abcc9b596420a9e9172fd5938620e265a0f9df921461055b565b73ffffffffffffffffffffffffffffffffffffffff821673b16a1dbe755f992636705fdbb3a8678a657eb3ea145b92915050565b60008061056d87610771565b905061057a8187876107c1565b6040517f57ecfd28000000000000000000000000000000000000000000000000000000008152737865fafc2db2093669d92c0f33aeef291086befd906357ecfd28906105d0908990899089908990600401611169565b6020604051808303816000875af11580156105ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061391906110f7565b5061061e8686610834565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316600482015230602482015260448101829052909250731c7d4b196cb0c7b01d743fbc6116a902379c7238906323b872dd906064016020604051808303816000875af11580156106ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d291906110f7565b505095945050505050565b61076f367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb8013560601c367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00135367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcc013560601c73ffffffffffffffffffffffffffffffffffffffff169190610868565b565b600061079282731c7d4b196cb0c7b01d743fbc6116a902379c7238306108d1565b90508073ffffffffffffffffffffffffffffffffffffffff163b6000036107bc576107bc82610aa5565b919050565b6107cb8282610b4b565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461082f576040517f984af80f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b600080838361084560746044611190565b60ff16908092610857939291906111a9565b610860916111d3565b949350505050565b8060000361087557505050565b73ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146108c75761082f73ffffffffffffffffffffffffffffffffffffffff84168383610b5c565b61082f8282610be9565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085901b16602082015260009081907fff00000000000000000000000000000000000000000000000000000000000000908490603401604051602081830303815290604052805190602001206040518060200161095290610fc3565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f90910116604081815273ffffffffffffffffffffffffffffffffffffffff8a16602083015201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526109de9291602001611233565b60405160208183030381529060405280519060200120604051602001610a6694939291907fff0000000000000000000000000000000000000000000000000000000000000094909416845260609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830152603582015260550190565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152919052805160209091012095945050505050565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606083901b16602082015260340160405160208183030381529060405280519060200120731c7d4b196cb0c7b01d743fbc6116a902379c7238604051610b0e90610fc3565b73ffffffffffffffffffffffffffffffffffffffff90911681526020018190604051809103906000f590508015801561082f573d6000803e3d6000fd5b600080838361084560746024611190565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261082f908490610d43565b80471015610c53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610185565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610cad576040519150601f19603f3d011682016040523d82523d6000602084013e610cb2565b606091505b505090508061082f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610185565b6000610da5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610e529092919063ffffffff16565b9050805160001480610dc6575080806020019051810190610dc691906110f7565b61082f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610185565b60606108608484600085856000808673ffffffffffffffffffffffffffffffffffffffff168587604051610e869190611262565b60006040518083038185875af1925050503d8060008114610ec3576040519150601f19603f3d011682016040523d82523d6000602084013e610ec8565b606091505b5091509150610ed987838387610ee4565b979650505050505050565b60608315610f7a578251600003610f735773ffffffffffffffffffffffffffffffffffffffff85163b610f73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610185565b5081610860565b6108608383815115610f8f5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610185919061127e565b610147806112d083390190565b60008083601f840112610fe257600080fd5b50813567ffffffffffffffff811115610ffa57600080fd5b60208301915083602082850101111561101257600080fd5b9250929050565b60008060008060006060868803121561103157600080fd5b853573ffffffffffffffffffffffffffffffffffffffff8116811461105557600080fd5b9450602086013567ffffffffffffffff8082111561107257600080fd5b61107e89838a01610fd0565b9096509450604088013591508082111561109757600080fd5b506110a488828901610fd0565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561055b5761055b6110b5565b60006020828403121561110957600080fd5b8151801515811461111957600080fd5b9392505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60408152600061117d604083018688611120565b8281036020840152610ed9818587611120565b60ff818116838216019081111561055b5761055b6110b5565b600080858511156111b957600080fd5b838611156111c657600080fd5b5050820193919092039150565b8035602083101561055b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b60005b8381101561122a578181015183820152602001611212565b50506000910152565b6000835161124581846020880161120f565b83519083019061125981836020880161120f565b01949350505050565b6000825161127481846020870161120f565b9190910192915050565b602081526000825180602084015261129d81604085016020870161120f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe608060405234801561001057600080fd5b5060405161014738038061014783398101604081905261002f916100a8565b60405163095ea7b360e01b815233600482015260001960248201526001600160a01b0382169063095ea7b3906044016020604051808303816000875af115801561007d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a191906100d8565b50506100fa565b6000602082840312156100ba57600080fd5b81516001600160a01b03811681146100d157600080fd5b9392505050565b6000602082840312156100ea57600080fd5b815180151581146100d157600080fd5b603f806101086000396000f3fe6080604052600080fdfea2646970667358221220a42c2eb9cb1c29af1619d974cd71186456bb22ec12ecff34b194cef6048eae6b64736f6c63430008190033a2646970667358221220d6873125604bd600cff9a3b7a1e3bbdefd9b6d51c85e5bd77650f311d757a89f64736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c8063b6a84a5f11610050578063b6a84a5f146100d7578063de73363c146100f2578063f67784f81461010757600080fd5b806346ac8bd51461006c57806382bfefc8146100bc575b600080fd5b6100937f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b610093731c7d4b196cb0c7b01d743fbc6116a902379c723881565b610093737865fafc2db2093669d92c0f33aeef291086befd81565b610105610100366004611019565b61011a565b005b610105610115366004611019565b610356565b610123336104e4565b61018e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6f6e6c7947656c61746f52656c6179000000000000000000000000000000000060448201526064015b60405180910390fd5b600061019d8686868686610561565b90506101a76106dd565b60006101d67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0360135836110e4565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016600482015260248101829052909150731c7d4b196cb0c7b01d743fbc6116a902379c72389063095ea7b3906044016020604051808303816000875af1158015610280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a491906110f7565b506040517f338b5dea00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063338b5dea90604401600060405180830381600087803b15801561033557600080fd5b505af1158015610349573d6000803e3d6000fd5b5050505050505050505050565b60006103658686868686610561565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016600482015260248101829052909150731c7d4b196cb0c7b01d743fbc6116a902379c72389063095ea7b3906044016020604051808303816000875af115801561040f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043391906110f7565b506040517f338b5dea00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063338b5dea90604401600060405180830381600087803b1580156104c457600080fd5b505af11580156104d8573d6000803e3d6000fd5b50505050505050505050565b60004661014414806104f7575046610118145b61052d5773ffffffffffffffffffffffffffffffffffffffff821673abcc9b596420a9e9172fd5938620e265a0f9df921461055b565b73ffffffffffffffffffffffffffffffffffffffff821673b16a1dbe755f992636705fdbb3a8678a657eb3ea145b92915050565b60008061056d87610771565b905061057a8187876107c1565b6040517f57ecfd28000000000000000000000000000000000000000000000000000000008152737865fafc2db2093669d92c0f33aeef291086befd906357ecfd28906105d0908990899089908990600401611169565b6020604051808303816000875af11580156105ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061391906110f7565b5061061e8686610834565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316600482015230602482015260448101829052909250731c7d4b196cb0c7b01d743fbc6116a902379c7238906323b872dd906064016020604051808303816000875af11580156106ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d291906110f7565b505095945050505050565b61076f367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb8013560601c367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00135367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcc013560601c73ffffffffffffffffffffffffffffffffffffffff169190610868565b565b600061079282731c7d4b196cb0c7b01d743fbc6116a902379c7238306108d1565b90508073ffffffffffffffffffffffffffffffffffffffff163b6000036107bc576107bc82610aa5565b919050565b6107cb8282610b4b565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461082f576040517f984af80f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b600080838361084560746044611190565b60ff16908092610857939291906111a9565b610860916111d3565b949350505050565b8060000361087557505050565b73ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146108c75761082f73ffffffffffffffffffffffffffffffffffffffff84168383610b5c565b61082f8282610be9565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085901b16602082015260009081907fff00000000000000000000000000000000000000000000000000000000000000908490603401604051602081830303815290604052805190602001206040518060200161095290610fc3565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f90910116604081815273ffffffffffffffffffffffffffffffffffffffff8a16602083015201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526109de9291602001611233565b60405160208183030381529060405280519060200120604051602001610a6694939291907fff0000000000000000000000000000000000000000000000000000000000000094909416845260609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830152603582015260550190565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152919052805160209091012095945050505050565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606083901b16602082015260340160405160208183030381529060405280519060200120731c7d4b196cb0c7b01d743fbc6116a902379c7238604051610b0e90610fc3565b73ffffffffffffffffffffffffffffffffffffffff90911681526020018190604051809103906000f590508015801561082f573d6000803e3d6000fd5b600080838361084560746024611190565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261082f908490610d43565b80471015610c53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610185565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610cad576040519150601f19603f3d011682016040523d82523d6000602084013e610cb2565b606091505b505090508061082f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610185565b6000610da5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610e529092919063ffffffff16565b9050805160001480610dc6575080806020019051810190610dc691906110f7565b61082f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610185565b60606108608484600085856000808673ffffffffffffffffffffffffffffffffffffffff168587604051610e869190611262565b60006040518083038185875af1925050503d8060008114610ec3576040519150601f19603f3d011682016040523d82523d6000602084013e610ec8565b606091505b5091509150610ed987838387610ee4565b979650505050505050565b60608315610f7a578251600003610f735773ffffffffffffffffffffffffffffffffffffffff85163b610f73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610185565b5081610860565b6108608383815115610f8f5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610185919061127e565b610147806112d083390190565b60008083601f840112610fe257600080fd5b50813567ffffffffffffffff811115610ffa57600080fd5b60208301915083602082850101111561101257600080fd5b9250929050565b60008060008060006060868803121561103157600080fd5b853573ffffffffffffffffffffffffffffffffffffffff8116811461105557600080fd5b9450602086013567ffffffffffffffff8082111561107257600080fd5b61107e89838a01610fd0565b9096509450604088013591508082111561109757600080fd5b506110a488828901610fd0565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561055b5761055b6110b5565b60006020828403121561110957600080fd5b8151801515811461111957600080fd5b9392505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60408152600061117d604083018688611120565b8281036020840152610ed9818587611120565b60ff818116838216019081111561055b5761055b6110b5565b600080858511156111b957600080fd5b838611156111c657600080fd5b5050820193919092039150565b8035602083101561055b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b60005b8381101561122a578181015183820152602001611212565b50506000910152565b6000835161124581846020880161120f565b83519083019061125981836020880161120f565b01949350505050565b6000825161127481846020870161120f565b9190910192915050565b602081526000825180602084015261129d81604085016020870161120f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe608060405234801561001057600080fd5b5060405161014738038061014783398101604081905261002f916100a8565b60405163095ea7b360e01b815233600482015260001960248201526001600160a01b0382169063095ea7b3906044016020604051808303816000875af115801561007d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a191906100d8565b50506100fa565b6000602082840312156100ba57600080fd5b81516001600160a01b03811681146100d157600080fd5b9392505050565b6000602082840312156100ea57600080fd5b815180151581146100d157600080fd5b603f806101086000396000f3fe6080604052600080fdfea2646970667358221220a42c2eb9cb1c29af1619d974cd71186456bb22ec12ecff34b194cef6048eae6b64736f6c63430008190033a2646970667358221220d6873125604bd600cff9a3b7a1e3bbdefd9b6d51c85e5bd77650f311d757a89f64736f6c63430008190033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}